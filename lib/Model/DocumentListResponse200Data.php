<?php
/**
 * DocumentListResponse200Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  CaelumPhpClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Client Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-06-10T08:58:29Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CaelumPhpClient\Model;

use \ArrayAccess;
use \CaelumPhpClient\ObjectSerializer;

/**
 * DocumentListResponse200Data Class Doc Comment
 *
 * @category Class
 * @package  CaelumPhpClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentListResponse200Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentListResponse200_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'totalDocs' => 'int',
'limit' => 'int',
'totalPages' => 'int',
'page' => 'int',
'pagingCounter' => 'int',
'hasPrevPage' => 'bool',
'hasNextPage' => 'bool',
'docs' => '\CaelumPhpClient\Model\DocumentResponse200Data[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'totalDocs' => null,
'limit' => null,
'totalPages' => null,
'page' => null,
'pagingCounter' => null,
'hasPrevPage' => null,
'hasNextPage' => null,
'docs' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'totalDocs' => 'totalDocs',
'limit' => 'limit',
'totalPages' => 'totalPages',
'page' => 'page',
'pagingCounter' => 'pagingCounter',
'hasPrevPage' => 'hasPrevPage',
'hasNextPage' => 'hasNextPage',
'docs' => 'docs'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'totalDocs' => 'setTotalDocs',
'limit' => 'setLimit',
'totalPages' => 'setTotalPages',
'page' => 'setPage',
'pagingCounter' => 'setPagingCounter',
'hasPrevPage' => 'setHasPrevPage',
'hasNextPage' => 'setHasNextPage',
'docs' => 'setDocs'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'totalDocs' => 'getTotalDocs',
'limit' => 'getLimit',
'totalPages' => 'getTotalPages',
'page' => 'getPage',
'pagingCounter' => 'getPagingCounter',
'hasPrevPage' => 'getHasPrevPage',
'hasNextPage' => 'getHasNextPage',
'docs' => 'getDocs'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['totalDocs'] = isset($data['totalDocs']) ? $data['totalDocs'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['totalPages'] = isset($data['totalPages']) ? $data['totalPages'] : null;
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['pagingCounter'] = isset($data['pagingCounter']) ? $data['pagingCounter'] : null;
        $this->container['hasPrevPage'] = isset($data['hasPrevPage']) ? $data['hasPrevPage'] : null;
        $this->container['hasNextPage'] = isset($data['hasNextPage']) ? $data['hasNextPage'] : null;
        $this->container['docs'] = isset($data['docs']) ? $data['docs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets totalDocs
     *
     * @return int
     */
    public function getTotalDocs()
    {
        return $this->container['totalDocs'];
    }

    /**
     * Sets totalDocs
     *
     * @param int $totalDocs totalDocs
     *
     * @return $this
     */
    public function setTotalDocs($totalDocs)
    {
        $this->container['totalDocs'] = $totalDocs;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit limit
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets totalPages
     *
     * @return int
     */
    public function getTotalPages()
    {
        return $this->container['totalPages'];
    }

    /**
     * Sets totalPages
     *
     * @param int $totalPages totalPages
     *
     * @return $this
     */
    public function setTotalPages($totalPages)
    {
        $this->container['totalPages'] = $totalPages;

        return $this;
    }

    /**
     * Gets page
     *
     * @return int
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int $page page
     *
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets pagingCounter
     *
     * @return int
     */
    public function getPagingCounter()
    {
        return $this->container['pagingCounter'];
    }

    /**
     * Sets pagingCounter
     *
     * @param int $pagingCounter pagingCounter
     *
     * @return $this
     */
    public function setPagingCounter($pagingCounter)
    {
        $this->container['pagingCounter'] = $pagingCounter;

        return $this;
    }

    /**
     * Gets hasPrevPage
     *
     * @return bool
     */
    public function getHasPrevPage()
    {
        return $this->container['hasPrevPage'];
    }

    /**
     * Sets hasPrevPage
     *
     * @param bool $hasPrevPage hasPrevPage
     *
     * @return $this
     */
    public function setHasPrevPage($hasPrevPage)
    {
        $this->container['hasPrevPage'] = $hasPrevPage;

        return $this;
    }

    /**
     * Gets hasNextPage
     *
     * @return bool
     */
    public function getHasNextPage()
    {
        return $this->container['hasNextPage'];
    }

    /**
     * Sets hasNextPage
     *
     * @param bool $hasNextPage hasNextPage
     *
     * @return $this
     */
    public function setHasNextPage($hasNextPage)
    {
        $this->container['hasNextPage'] = $hasNextPage;

        return $this;
    }

    /**
     * Gets docs
     *
     * @return \CaelumPhpClient\Model\DocumentResponse200Data[]
     */
    public function getDocs()
    {
        return $this->container['docs'];
    }

    /**
     * Sets docs
     *
     * @param \CaelumPhpClient\Model\DocumentResponse200Data[] $docs docs
     *
     * @return $this
     */
    public function setDocs($docs)
    {
        $this->container['docs'] = $docs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
